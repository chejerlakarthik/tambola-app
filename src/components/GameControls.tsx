import React, { useState } from 'react';\nimport './GameControls.css';\n\ninterface GameControlsProps {\n  gameActive: boolean;\n  autoCall: boolean;\n  callInterval: number;\n  calledNumbersCount: number;\n  onStartGame: (ticketCount: number) => void;\n  onCallNumber: () => void;\n  onToggleAutoCall: (auto: boolean) => void;\n  onIntervalChange: (interval: number) => void;\n  onResetGame: () => void;\n}\n\nconst GameControls: React.FC<GameControlsProps> = ({\n  gameActive,\n  autoCall,\n  callInterval,\n  calledNumbersCount,\n  onStartGame,\n  onCallNumber,\n  onToggleAutoCall,\n  onIntervalChange,\n  onResetGame\n}) => {\n  const [ticketCount, setTicketCount] = useState(4);\n  const [showSettings, setShowSettings] = useState(false);\n\n  return (\n    <div className=\"game-controls\">\n      <div className=\"main-controls\">\n        {!gameActive ? (\n          <div className=\"start-game-section\">\n            <div className=\"ticket-count-input\">\n              <label htmlFor=\"ticket-count\">Number of Tickets:</label>\n              <select \n                id=\"ticket-count\"\n                value={ticketCount} \n                onChange={(e) => setTicketCount(Number(e.target.value))}\n              >\n                <option value={1}>1</option>\n                <option value={2}>2</option>\n                <option value={3}>3</option>\n                <option value={4}>4</option>\n                <option value={6}>6</option>\n                <option value={8}>8</option>\n              </select>\n            </div>\n            <button \n              className=\"start-button\" \n              onClick={() => onStartGame(ticketCount)}\n            >\n              üéÆ Start New Game\n            </button>\n          </div>\n        ) : (\n          <div className=\"active-game-controls\">\n            <button \n              className=\"call-button\"\n              onClick={onCallNumber}\n              disabled={autoCall}\n            >\n              üì¢ Call Next Number\n            </button>\n            \n            <button \n              className=\"auto-toggle-button\"\n              onClick={() => onToggleAutoCall(!autoCall)}\n            >\n              {autoCall ? '‚è∏Ô∏è Stop Auto Call' : '‚ñ∂Ô∏è Auto Call'}\n            </button>\n            \n            <button \n              className=\"settings-button\"\n              onClick={() => setShowSettings(!showSettings)}\n            >\n              ‚öôÔ∏è Settings\n            </button>\n            \n            <button \n              className=\"reset-button\"\n              onClick={onResetGame}\n            >\n              üîÑ Reset Game\n            </button>\n          </div>\n        )}\n      </div>\n\n      {showSettings && gameActive && (\n        <div className=\"settings-panel\">\n          <div className=\"setting-item\">\n            <label htmlFor=\"call-interval\">Auto Call Interval (seconds):</label>\n            <select \n              id=\"call-interval\"\n              value={callInterval / 1000} \n              onChange={(e) => onIntervalChange(Number(e.target.value) * 1000)}\n            >\n              <option value={1}>1</option>\n              <option value={2}>2</option>\n              <option value={3}>3</option>\n              <option value={5}>5</option>\n              <option value={10}>10</option>\n            </select>\n          </div>\n          \n          <div className=\"game-info\">\n            <span>Numbers Remaining: {90 - calledNumbersCount}</span>\n            <span>Progress: {Math.round((calledNumbersCount / 90) * 100)}%</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameControls;